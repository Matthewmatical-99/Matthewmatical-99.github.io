{"version":3,"sources":["assets/sanik.png","constants/page-routes.js","components/Sanik/styles.js","components/Sanik/index.js","containers/Homepage/index.js","containers/ComingSoon/index.js","components/NavBar/styles.js","components/NavBar/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","page_routes","Sanik","styled","img","_templateObject","react_default","a","createElement","styles_Sanik","src","sanikImage","Homepage","className","href","target","rel","components_Sanik","ComingSoon","style","color","react_router_dom","to","pageRoutes","NavBarWrapper","div","styles_templateObject","NavBar","_templateObject2","NavButton","_templateObject3","styles_NavBar","App","backgroundImage","components_NavBar","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wOCAzBC,EACH,IADGA,EAEH,aAFGA,EAGN,UAHMA,EAIN,qmBCFF,IAAMC,EAAQC,IAAOC,IAAVC,KCKHH,EAFD,kBAAMI,EAAAC,EAAAC,cAACC,EAAD,CAAcC,IAAKC,aCyBxBC,MArBf,WACE,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBACbP,EAAAC,EAAAC,cAAA,sFACAF,EAAAC,EAAAC,cAAA,4EACAF,EAAAC,EAAAC,cAAA,yGACAF,EAAAC,EAAAC,cAAA,KACEK,UAAU,WACVC,KAAK,uCACLC,OAAO,SACPC,IAAI,uBAJN,mBASFV,EAAAC,EAAAC,cAACS,EAAD,QCZSC,EAPI,kBACjBZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGW,MAAO,CAAEC,MAAO,UAAnB,6BACAd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAIC,EAAqBJ,MAAO,CAAEC,MAAO,YAA/C,qjBCPG,IAAMI,EAAgBrB,IAAOsB,IAAVC,KAQbC,EAASxB,IAAOsB,IAAVG,KASNC,EAAY1B,IAAOsB,IAAVK,KCOPH,EAnBA,kBACbrB,EAAAC,EAAAC,cAACgB,EAAD,KACElB,EAAAC,EAAAC,cAACuB,EAAD,KACEzB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAIC,GACRjB,EAAAC,EAAAC,cAACqB,EAAD,cAEFvB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAIC,GACRjB,EAAAC,EAAAC,cAACqB,EAAD,kBAEFvB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAIC,GACRjB,EAAAC,EAAAC,cAACqB,EAAD,eAEFvB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAIC,GACRjB,EAAAC,EAAAC,cAACqB,EAAD,kBCMOG,SAfH,kBACV1B,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,aAAaM,MAAO,CAAEc,gBAAiB,uCACvD3B,EAAAC,EAAAC,cAAA,MAAIK,UAAU,cAAd,4CAEFP,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOC,KAAMb,EAAqBc,OAAK,EAACC,UAAW1B,IACnDN,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOC,KAAMb,EAAqBe,UAAWpB,IAC7CZ,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOC,KAAMb,EAAkBe,UAAWpB,IAC1CZ,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOC,KAAMb,EAAkBe,UAAWpB,QCT5BqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b1284a09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sanik.e071ee00.png\";","export default {\r\n  HOMEPAGE: '/',\r\n  ABOUT_ME: '/about-me/',\r\n  GAMES: '/games/',\r\n  MEMES: '/dank-memes/'\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Sanik = styled.img`\r\n    max-height: 100px;\r\n    max-width: 100px;\r\n    position: fixed;\r\n    left: -100px;\r\n    -webkit-animation: gottagofast 0.5s linear infinite;\r\n    animation: gottagofast 0.5s linear infinite;\r\n    bottom: 0px;\r\n\r\n    @-webkit-keyframes gottagofast {\r\n        from {\r\n            left: -100px;\r\n        } to {\r\n            left: 100vw;\r\n        }\r\n    }\r\n    \r\n    @keyframes gottagofast {\r\n        from {\r\n            left: -100px;\r\n        } to {\r\n            left: 100vw;\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\n\r\nimport sanikImage from '../../assets/sanik.png';\r\nimport * as Styled from './styles';\r\n\r\nconst Sanik = () => <Styled.Sanik src={sanikImage} />;\r\n\r\nexport default Sanik;\r\n","import React from 'react';\r\n// eslint-disable-next-line no-unused-vars\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nimport Sanik from '../../components/Sanik';\r\nimport pageRoutes from '../../constants/page-routes';\r\n\r\nimport './index.css';\r\n\r\nfunction Homepage() {\r\n  return (\r\n    <div>\r\n      <div className=\"content-body\">\r\n        <p>This is the official website of Matthew Phillips. Thank you for visiting.</p>\r\n        <p>Since I've just started working on this, there isn't much here.</p>\r\n        <p>More content (and maybe even some professionalism) coming soon. Please check again tomorrow.</p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://github.com/Matthewmatical-99\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          My GitHub page\r\n        </a>\r\n      </div>\r\n      <Sanik />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React from 'react';\r\n// eslint-disable-next-line no-unused-vars\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nimport pageRoutes from '../../constants/page-routes';\r\n\r\nconst ComingSoon = () => (\r\n  <div>\r\n    <p style={{ color: 'white' }}>This page is coming soon.</p>\r\n    <Link to={pageRoutes.HOMEPAGE} style={{ color: '#61dafb' }}>Back to homepage</Link>\r\n  </div>\r\n);\r\n\r\nexport default ComingSoon;\r\n","import styled from 'styled-components';\r\n\r\nexport const NavBarWrapper = styled.div`\r\n  min-width: 100vw;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const NavBar = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  min-width: 80vw;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const NavButton = styled.div`\r\n  height: 70px;\r\n  width: 120px;\r\n  background-color: #282c34;\r\n  color: white;\r\n`;\r\n","import React from 'react';\r\n// eslint-disable-next-line no-unused-vars\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nimport pageRoutes from '../../constants/page-routes';\r\nimport * as Styled from './styles';\r\n\r\nconst NavBar = () => (\r\n  <Styled.NavBarWrapper>\r\n    <Styled.NavBar>\r\n      <Link to={pageRoutes.HOMEPAGE}>\r\n        <Styled.NavButton>Home</Styled.NavButton>\r\n      </Link>\r\n      <Link to={pageRoutes.ABOUT_ME}>\r\n        <Styled.NavButton>About Me</Styled.NavButton>\r\n      </Link>\r\n      <Link to={pageRoutes.GAMES}>\r\n        <Styled.NavButton>Games</Styled.NavButton>\r\n      </Link>\r\n      <Link to={pageRoutes.MEMES}>\r\n        <Styled.NavButton>Memes</Styled.NavButton>\r\n      </Link>\r\n    </Styled.NavBar>\r\n  </Styled.NavBarWrapper>\r\n);\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nimport pageRoutes from './constants/page-routes';\r\n\r\nimport Homepage from './containers/Homepage';\r\nimport ComingSoon from './containers/ComingSoon';\r\nimport NavBar from './components/NavBar';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => (\r\n  <Router>\r\n    <div className=\"App\">\r\n      <header className=\"App-header\" style={{ backgroundImage: 'url(https://imgur.com/kgbYeVO.jpg)' }}>\r\n        <h1 className=\"page-title\">Matthew Phillips' Website of Dank Memes</h1>\r\n      </header>\r\n      <NavBar />\r\n      <Route path={pageRoutes.HOMEPAGE} exact component={Homepage} />\r\n      <Route path={pageRoutes.ABOUT_ME} component={ComingSoon} />\r\n      <Route path={pageRoutes.GAMES} component={ComingSoon} />\r\n      <Route path={pageRoutes.MEMES} component={ComingSoon} />\r\n    </div>\r\n  </Router>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}