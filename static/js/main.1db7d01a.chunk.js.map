{"version":3,"sources":["assets/sanik.png","assets/mlgFrog.gif","constants/page-routes.js","components/CollatzPhoneInput/index.js","components/Sanik/styles.js","components/Sanik/index.js","containers/Homepage/index.js","containers/ComingSoon/index.js","containers/Maze/maze-size-input.js","hooks/useObjectState.js","containers/Maze/maze-generation-utils.js","containers/Maze/useMaze.js","constants/maze-constants.js","containers/Maze/styles.js","containers/Maze/mazeChunk.js","containers/Maze/index.js","containers/ConnectFour/Cell/styles.js","containers/ConnectFour/Cell/index.js","hooks/useBooleanState.js","containers/ConnectFour/helpers.js","containers/ConnectFour/useCF.js","containers/ConnectFour/opponent.js","containers/ConnectFour/styles.js","containers/ConnectFour/index.js","containers/GamesPage/styles.js","containers/GamesPage/index.js","components/MlgFrog/styles.js","components/MlgFrog/index.js","containers/MemesPage/index.js","components/NavBar/styles.js","components/NavBar/index.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","page_routes","formatNum","num","padStart","CollatzPhoneInput","_useState","useState","_useState2","Object","slicedToArray","setNum","react_default","a","createElement","index_esm","flex","flexDirection","justifyContent","onClick","disabled","alert","Sanik","styled","img","_templateObject","styles_Sanik","src","sanikImage","Homepage","className","href","target","rel","components_CollatzPhoneInput","components_Sanik","ComingSoon","style","color","react_router_dom","to","pageRoutes","mazeConfigInput","value","height","handler","name","Slider","max","min","onChange","event","newVal","step","useObjectState","initialState","state","setState","update","R","deepMerge","updateOne","makeNew","width","maze","Array","fill","forEach","row","yPos","cell","xPos","Math","random","isSolvable","startVisits","stepsFailsafe","length","x","y","facing","nextX","nextY","makeGoodMaze","lCol","lRow","i","j","k","niceify","getMazeRoot","node","id","parentNode","useMaze","_useObjectState","userX","userY","won","grid","makeMaze","nextWidth","nextHeight","mazeNum","restarting","safeGridAccess","defaultVal","userIsAt","checkWon","changes","nextState","endX","endY","undefined","reset","setWidth","newWidth","setHeight","newHeight","setRestarting","newRestarting","userIsWithin","w","h","unifiedClickHandler","mazeRootElement","mazeBounds","getBoundingClientRect","clickedCellX","floor","clientX","scrollLeft","left","clickedCellY","clientY","scrollTop","top","keys","keyHandler","needReset","key","restartHandler","getCellColour","xyCoords","Cell","div","styles_templateObject","props","cellColour","Grid","_templateObject2","_templateObject3","_templateObject4","mazeWidth","MazeWrapper","_templateObject5","MazeConfig","_templateObject6","ConfigSlider","_templateObject7","MazeChunk","React","Component","shouldComponentUpdate","newProps","this","mazeHook","isNewMaze","playerWasHere","playerWillBeHere","render","_this$props","w1","w2","x2","display","mazeChunk_MazeChunk","h1","h2","y2","MemoizedMaze","memo","_mazeHook$state","tabIndex","mazeChunk","oldProps","_mazeHook$state2","useEffect","onKeyPress","maze_size_input","chipColours","ChipWrapper","Cell_styles_templateObject","dropHeight","CFChip","styles_templateObject2","yeet","CFCellWrapper","styles_templateObject3","CFGridPiece","svg","styles_templateObject4","CFGridHole","circle","styles_templateObject5","CFCell","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","rerenderDammit","bind","assertThisInitialized","forceUpdate","window","addEventListener","removeEventListener","innerWidth","useBooleanState","setFalse","setTrue","toggle","makeEmptyGrid","map","lineExtendsHere","val","isSafe","useCF","setGrid","openState","luigiState","_useState3","_useState4","winner","setWinner","resetDammitState","twoPlayersState","nextGameTwoPlayersState","checkGameOver","gameOver","centreVal","away","directions","lineLength","didWin","every","gridCol","boardFull","switchTwoPlayers","twoPlayerGame","resetGrid","setTimeout","doATurn","colNum","playerNum","gridCopy","slice","rowNum","lastIndexOf","opponentCol","availableCols","col","push","easy","opponentRow","getStatus","concat","open","resetDammit","CFGrid","ConnectFour_styles_templateObject","CFColumn","ConnectFour_styles_templateObject2","ConnectFour","_useCF","ConnectFour_Cell","alignItems","Switch","GameWrapper","GamesPage_styles_templateObject","Games","containers_Maze","containers_ConnectFour","FrogWrapper","MlgFrog_styles_templateObject","Froggo","MlgFrog_styles_templateObject2","visible","FrogControl","MlgFrog_styles_templateObject3","MlgFrog","_React$useState","_React$useState2","setVisible","checked","froggo","MemesPage","components_MlgFrog","NavBarWrapper","NavBar_styles_templateObject","NavBar","NavBar_styles_templateObject2","NavButton","NavBar_styles_templateObject3","withRouter","backgroundImage","components_NavBar","react_router","path","exact","component","App","src_Routes","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1db7d01a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sanik.e071ee00.png\";","module.exports = __webpack_public_path__ + \"static/media/mlgFrog.416aecb3.gif\";","export default {\n  HOMEPAGE: '/',\n  ABOUT_ME: '/about-me/',\n  GAMES: '/games/',\n  MEMES: '/dank-memes/',\n};\n","import React, { useState } from 'react';\nimport { Flex } from 'rebass';\n\nconst formatNum = num => (num + '').padStart(10, '0');\n\nconst CollatzPhoneInput = () => {\n  const [num, setNum] = useState(1);\n\n  return (\n    <Flex flex={1} flexDirection=\"column\">\n      <p>Very user-friendly phone number input:</p>\n      <p>Your phone number:&nbsp;{formatNum(num)}</p>\n      <Flex flex={1} justifyContent=\"center\">\n        <button onClick={() => setNum(num * 2)}>2n</button>\n        {((num % 3) === 1)\n          ? <button onClick={() => setNum((num - 1) / 3)}>(n-1)/3</button>\n          : <button disabled>(n-1)/3</button>}\n        <button onClick={() => setNum(1)}>Reset</button>\n        <button onClick={() => {\n          alert('Congrats! You just submitted the phone number ' + formatNum(num)\n          + \"! Don't worry; I don't record these numbers anywhere; this is just for fun\");\n        }}>Submit</button>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default CollatzPhoneInput;\n","import styled from 'styled-components';\n\nexport const Sanik = styled.img`\n    max-height: 100px;\n    max-width: 100px;\n    position: fixed;\n    left: -100px;\n    -webkit-animation: gottagofast 0.5s linear infinite;\n    animation: gottagofast 0.5s linear infinite;\n    bottom: 0px;\n\n    @-webkit-keyframes gottagofast {\n        from {\n            left: -100px;\n        } to {\n            left: 100vw;\n        }\n    }\n    \n    @keyframes gottagofast {\n        from {\n            left: -100px;\n        } to {\n            left: 100vw;\n        }\n    }\n`;\n","import React from 'react';\n\nimport sanikImage from '../../assets/sanik.png';\nimport * as Styled from './styles';\n\nconst Sanik = () => <Styled.Sanik src={sanikImage} />;\n\nexport default Sanik;\n","import React from 'react';\nimport CollatzPhoneInput from '../../components/CollatzPhoneInput';\n\nimport Sanik from '../../components/Sanik';\n\nimport './index.css';\n\nfunction Homepage() {\n  return (\n    <div>\n      <div className=\"content-body\">\n        <p>This is the official website of Zoey/Matthew Phillips. Thank you for visiting.</p>\n        <p>I made this website to show off my l33t c0d1ng ski11z.</p>\n        <p>Check out the games; there's actually some content there lol</p>\n        <p>More content (and maybe even some professionalism) coming soon. Please check again tomorrow.</p>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/Matthewmatical-99\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          My GitHub page\n        </a>\n        <p>Check out this very user-friendly phone-number input!</p>\n        <CollatzPhoneInput />\n      </div>\n      <Sanik />\n    </div>\n  );\n}\n\nexport default Homepage;\n","import React from 'react';\n// eslint-disable-next-line no-unused-vars\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport pageRoutes from '../../constants/page-routes';\n\nconst ComingSoon = () => (\n  <div>\n    <p style={{ color: 'white' }}>This page is coming soon. Don't hold your breath.</p>\n    <Link to={pageRoutes.HOMEPAGE} style={{ color: '#61dafb' }}>Back to homepage</Link>\n  </div>\n);\n\nexport default ComingSoon;\n","import React from 'react';\nimport Slider from '@material-ui/core/Slider';\n\nconst mazeConfigInput = ({ value, height, handler, name }) => {\n  return (\n    <div>\n      <label>{name}</label>\n      <Slider\n        max={201}\n        min={5}\n        onChange={(event, newVal) => handler(newVal)}\n        step={height ? 2 : 1} // Note that height is a bool; only odd values shall be accepted as maze heights.\n        value={value}\n      />\n    </div>\n  );\n};\n\nexport default mazeConfigInput;\n","import { useState } from 'react';\nimport * as R from 'ramda';\n\nconst useObjectState = (initialState = {}) => {\n  const [state, setState] = useState(initialState);\n\n  const update = R.pipe(R.mergeLeft, setState);\n\n  const deepMerge = R.pipe(R.mergeDeepLeft, setState);\n\n  const updateOne = R.pipe(R.objOf, update);\n\n  return {\n    state,\n    value: state,\n    update,\n    updateOne,\n    deepMerge,\n  };\n};\n\nexport default useObjectState;\n","function makeNew(width, height) {\n  const maze = Array(height).fill('placeholder');\n  maze.forEach((row, yPos) => {\n    maze[yPos] = new Array(width).fill(true);\n    if (yPos === 0 || yPos === height - 1) {\n      maze[yPos].forEach((cell, xPos) => { maze[yPos][xPos] = false; });\n    } else if (yPos % 2) {\n      maze[yPos].forEach((cell, xPos) => {\n        maze[yPos][xPos] = (Math.random() < 0.85);\n      });\n    } else {\n      maze[yPos].forEach((cell, xPos) => {\n        maze[yPos][xPos] = !!(xPos && !maze[yPos][xPos-1] && Math.random() < 0.35);\n      });\n    }\n    maze[yPos][0] = false;\n    maze[yPos][width - 1] = false;\n  });\n  maze[height - 1][width - 2] = true;\n  maze[1][1] = true;\n  maze[1][2] = true;\n  maze[2][1] = true;\n  return maze;\n}\n\nfunction isSolvable(maze) {\n  let startVisits = 0;\n  let stepsFailsafe = maze[0].length * maze.length * 4;\n  let [x, y, facing] = [1, 1, 1]; // Meaning of facing: 0-north, 1-west, 2-south, 3-west\n  while ((startVisits < 3) && stepsFailsafe) { // Only two ways to go from corner, so if start is visited thrice, all options have been exhausted.\n    if (x === maze[0].length - 2 && y === maze.length - 1) return true; // Reached the end\n    if (x === 1 && y === 1) startVisits++;\n    const nextX = x + ((facing % 2) * (facing - 2));\n    const nextY = y + ((!(facing % 2)) * (facing - 1));\n    if (maze[nextY][nextX]) {\n      x = nextX;\n      y = nextY;\n      facing += 3; // Keep following right wall\n    } else {\n      facing++; // There's a wall there; turn 90 degrees to the left\n    }\n    facing %= 4;\n    stepsFailsafe--;\n  }\n  return false;\n}\n\nfunction niceify(maze) {\n  const lCol = maze[0].length - 2;\n  const lRow = maze.length - 2;\n  for (let i = 2; i < lRow; i += 2) {\n    for (let j = 1; j <= lCol; j++) {\n      if (maze[i-1][j-1] && maze[i][j-1] && maze[i+1][j-1]) {\n        let k = j;\n        while (maze[i-1][k] && maze[i+1][k]) {\n          maze[i][k] = false;\n          k++;\n        }\n      }\n      if (!maze[i-1][j] && !maze[i+1][j] && !maze[i][j-1] && !maze[i][j+1]) maze[i][j] = false;\n      if (!maze[i-2][j] && !maze[i][j] && !maze[i-1][j-1] && !maze[i-1][j+1]) maze[i-1][j] = false;\n    }\n  }\n  for (let j = 1; j <= lCol; j++) {\n    if (!maze[lRow-1][j] && !maze[lRow+1][j] && !maze[lRow][j-1] && !maze[lRow][j+1]) maze[lRow][j] = false;\n  }\n  return maze;\n}\n\nexport default function makeGoodMaze(width, height) {\n  let maze = makeNew(width, height);\n  for (maze; !isSolvable(maze); maze = makeNew(width, height)) {}\n  return niceify(maze);\n}\n","import * as R from 'ramda';\n\nimport useObjectState from '../../hooks/useObjectState';\nimport { CELL_SIZE, MAZE_ROOT_ID, INIT_WIDTH, INIT_HEIGHT } from '../../constants/maze-constants';\nimport makeMaze from './maze-generation-utils';\n\n// Find maze root element from any descendant of it.\n// Useful for navigating arbitrary-depth cell chunk trees.\nconst getMazeRoot = node => {\n  if (!node) return null;\n  if (node.id === MAZE_ROOT_ID) return node;\n  return getMazeRoot(node.parentNode);\n};\n\nconst useMaze = () => {\n  const { update, state } = useObjectState({\n    userX: 1,\n    userY: 1,\n    won: false,\n    grid: makeMaze(INIT_WIDTH, INIT_HEIGHT),\n    width: INIT_WIDTH,\n    height: INIT_HEIGHT,\n    nextWidth: INIT_WIDTH,\n    nextHeight: INIT_HEIGHT,\n    mazeNum: 0,\n    restarting: false,\n  });\n\n  // Minor helper functions\n  const safeGridAccess = ({ x, y }, defaultVal = false) => (R.path([y, x], state.grid) || defaultVal);\n  const userIsAt = ({ x, y }) => (x === state.userX && y === state.userY);\n  const getCellColour = (xyCoords) => { // xy coords is { x, y }\n    if (userIsAt(xyCoords)) return (state.won ? 'lightgreen' : 'red');\n    return (safeGridAccess(xyCoords) ? 'white' : 'black');\n  };\n  const userIsWithin = ({ x, y, w, h }) => (\n    state.userX >= x && state.userX < (x + w) && state.userY >= y && state.userY < (y + h));\n\n  // Take in an object of upcoming state changes and add [won: true] to it if appropriate\n  const checkWon = changes => {\n    const nextState = R.mergeRight(state, changes);\n    \n    // Check if the player is at the end of the maze\n    const endX = safeGridAccess({ x: 'length', y: 0 }, 0) - 2;\n    const endY = nextState.grid.length - 1;\n    if (nextState.userX === endX && nextState.userY === endY && changes.won === undefined) {\n      changes.won = true;\n    }\n\n    return changes;\n  };\n\n  const unifiedClickHandler = event => {\n    // Don't move if player has already won.\n    if (state.won) return;\n    \n    // Find maze root, and calculate click position relative to maze position.\n    const mazeRootElement = getMazeRoot(event.target);\n    const mazeBounds = mazeRootElement.getBoundingClientRect();\n    \n    // Then divide by cell size to find which cell was clicked.\n    const clickedCellX = Math.floor((event.clientX + mazeRootElement.scrollLeft - mazeBounds.left) / CELL_SIZE);\n    const clickedCellY = Math.floor((event.clientY + mazeRootElement.scrollTop - mazeBounds.top) / CELL_SIZE);\n\n    // Check if the two points are in the same row or column\n    // and there is an open hallway between them. Update player position if so.\n    const changes = {};\n    if (clickedCellX === state.userX) {\n      for (let i = Math.min(state.userY, clickedCellY); i <= Math.max(state.userY, clickedCellY); i++) {\n        if (!safeGridAccess({ x: state.userX, y: i })) return;\n      }\n      changes.userY = clickedCellY;\n    } else if (clickedCellY === state.userY) {\n      for (let i = Math.min(state.userX, clickedCellX); i <= Math.max(state.userX, clickedCellX); i++) {\n        if (!safeGridAccess({ x: i, y: state.userY })) return;\n      }\n      changes.userX = clickedCellX;\n    }\n\n    if (Object.keys(changes).length > 0) {\n      checkWon(changes);\n      update(changes);\n    }\n  };\n\n  const reset = () => {\n    if (!state.restarting) {\n      update({\n        width: state.nextWidth,\n        height: state.nextHeight,\n        grid: makeMaze(state.nextWidth, state.nextHeight),\n        won: false,\n        mazeNum: state.mazeNum + 1,\n        userX: 1,\n        userY: 1,\n        restarting: true,\n      });\n    }\n  };\n\n  const restartHandler = (event) => {\n    switch (event.key) {\n      case 'r':\n      case 'R':\n        reset();\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  const keyHandler = (event) => {\n    const needReset = restartHandler(event);\n    if (state.won || needReset) return;\n    const changes = {};\n    const { userX, userY } = state;\n    switch (event.key) {\n      case 'w':\n      case 'W':\n        if (safeGridAccess({ x: userX, y: userY - 1 })) changes.userY = userY - 1;\n        break;\n      case 'a':\n      case 'A':\n        if (safeGridAccess({ x: userX - 1, y: userY })) changes.userX = userX - 1;\n        break;\n      case 's':\n      case 'S':\n        if (safeGridAccess({ x: userX, y: userY + 1 })) changes.userY = userY + 1;\n        break;\n      case 'd':\n      case 'D':\n        if (safeGridAccess({ x: userX + 1, y: userY })) changes.userX = userX + 1;\n        break;\n      default:\n        break;\n    }\n\n    if (Object.keys(changes).length > 0) {\n      checkWon(changes);\n      update(changes);\n    }\n  };\n\n  return {\n    state,\n    setWidth: newWidth => { update({ nextWidth: newWidth }); },\n    setHeight: newHeight => { update({ nextHeight: newHeight }); },\n    setRestarting: newRestarting => { update({ restarting: newRestarting }); },\n    reset,\n    userIsAt,\n    userIsWithin,\n    safeGridAccess,\n    unifiedClickHandler,\n    keyHandler,\n    getCellColour,\n  };\n};\n\nexport default useMaze;\n","export const CELL_SIZE = 10;\nexport const MAZE_ROOT_ID = 'maze-root';\nexport const INIT_WIDTH = 58;\nexport const INIT_HEIGHT = 37;\n","import styled from 'styled-components';\n\nexport const Cell = styled.div`\n  min-height: 10px;\n  min-width: 10px;\n  max-height: 10px;\n  max-width: 10px;\n  background-color: ${props => props.cellColour};\n  opacity: 1;\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const Col = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Grid = styled.div`\n  display: flex;\n  flex-direction: column;\n  outline: none;\n  overflow: auto;\n  margin-right: 18px;\n  margin-bottom: 0px;\n  margin-left: 0px;\n  @media (min-width: ${props => props.mazeWidth * 10}px) {\n    align-self: flex-start;\n  }\n`;\n\nexport const MazeWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const MazeConfig = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ConfigSlider = styled.div`\n  width: 100px;\n  margin: 10px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as Styled from './styles';\n\n// Generalized rectangular block of cells.\n// By turning the n maze cells into a (close to balanced) binary tree structure of chunks,\n// each player move only calls shouldComponentUpdate on O(log(n)) components.\nclass MazeChunk extends React.Component {\n  shouldComponentUpdate(newProps) {\n    if (!this.props.mazeHook) return false;\n    const isNewMaze = (this.props.mazeNum !== newProps.mazeNum);\n    const playerWasHere = this.props.mazeHook.userIsWithin(this.props);\n    const playerWillBeHere = newProps.mazeHook.userIsWithin(newProps);\n    return isNewMaze || playerWasHere || playerWillBeHere;\n  }\n\n  render() {\n    const { x, y, w, h, mazeHook, mazeNum } = this.props;\n    if (w > h) { // Split into left and right halves\n      const w1 = Math.floor(w / 2);\n      const w2 = w - w1;\n      const x2 = x + w1;\n\n      return (\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          {(w1 <= 1 && h <= 1) ? (\n            <Styled.Cell\n              x={x} y={y}\n              cellColour={mazeHook.getCellColour({ x, y })}\n            />\n          ) : <MazeChunk x={x} y={y} w={w1} h={h} mazeHook={mazeHook} mazeNum={mazeNum} />}\n          {(w2 <= 1 && h <= 1) ? (\n            <Styled.Cell\n              x={x2} y={y}\n              cellColour={mazeHook.getCellColour({ x: x2, y })}\n            />\n          ) : <MazeChunk x={x2} y={y} w={w2} h={h} mazeHook={mazeHook} mazeNum={mazeNum} />}\n        </div>\n      );\n    } else { // Split into top and bottom halves\n      const h1 = Math.floor(h / 2);\n      const h2 = h - h1;\n      const y2 = y + h1;\n\n      return (\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          {(w <= 1 && h1 <= 1) ? (\n            <Styled.Cell\n              x={x} y={y}\n              cellColour={mazeHook.getCellColour({ x, y })}\n            />\n          ) : <MazeChunk x={x} y={y} w={w} h={h1} mazeHook={mazeHook} mazeNum={mazeNum} />}\n          {(w <= 1 && h2 <= 1) ? (\n            <Styled.Cell\n              x={x} y={y2}\n              cellColour={mazeHook.getCellColour({ x, y: y2 })}\n            />\n          ) : <MazeChunk x={x} y={y2} w={w} h={h2} mazeHook={mazeHook} mazeNum={mazeNum} />}\n        </div>\n      );\n    }\n  }\n}\n\n// Like standard rectangle xywh, but measured in maze cells instead of pixels.\nMazeChunk.propTypes = {\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  w: PropTypes.number.isRequired,\n  h: PropTypes.number.isRequired,\n};\n\nexport default MazeChunk;\n","import React, { memo, useEffect } from 'react';\n\nimport { MAZE_ROOT_ID } from '../../constants/maze-constants';\nimport Input from './maze-size-input';\nimport useMaze from './useMaze';\nimport MazeChunk from './mazeChunk';\n\nimport * as Styled from './styles';\n\n// Idea: turn this entire fucker into an SVG; maybe it'll run faster?\n\nconst Maze = ({ mazeHook }) => {\n  const { mazeNum, width, height } = mazeHook.state;\n  return ((height || null) && (\n    <Styled.MazeWrapper mazeWidth={width}>\n      <Styled.Grid\n        tabIndex={0}\n        onClick={mazeHook.unifiedClickHandler}\n        id={MAZE_ROOT_ID}\n        mazeWidth={width}\n      >\n        <MazeChunk\n          x={0} y={0} w={width} h={height}\n          mazeHook={mazeHook} mazeNum={mazeNum}\n        />\n      </Styled.Grid>\n    </Styled.MazeWrapper>\n  ));\n};\n\nconst gameStatesEqual = (oldProps, newProps) => (\n  oldProps.userX === newProps.userX &&\n  oldProps.userY === newProps.userY &&\n  oldProps.mazeNum === newProps.mazeNum\n);\n\n// Prevents changes to width/height slider from rerendering parts of the maze\nconst MemoizedMaze = memo(Maze, gameStatesEqual);\n\nconst MazeWrapper = () => {\n  const mazeHook = useMaze();\n  const { mazeNum, nextWidth, nextHeight, userX, userY, restarting } = mazeHook.state;\n\n  useEffect(() => {\n    if (restarting) {\n      mazeHook.setRestarting(false);\n    }\n  }, [restarting, mazeHook]);\n\n  return (\n    <div onKeyPress={mazeHook.keyHandler}>\n      <div className=\"content-body\">\n        <Styled.MazeConfig>\n          <button onClick={mazeHook.reset}>Restart</button>\n          <p>Maze Settings:</p>\n          <Styled.ConfigSlider>\n            <Input value={nextWidth} handler={mazeHook.setWidth} name=\"Maze Width\" />\n          </Styled.ConfigSlider>\n          <Styled.ConfigSlider>\n            <Input value={nextHeight} handler={mazeHook.setHeight} name=\"Maze Height\" height />\n          </Styled.ConfigSlider>\n        </Styled.MazeConfig>\n      </div>\n      <MemoizedMaze mazeHook={mazeHook} mazeNum={mazeNum} userX={userX} userY={userY} />\n    </div>\n  );\n};\n\nexport default MazeWrapper;\n","import styled from 'styled-components';\n\nconst chipColours = ['white', 'red', 'yellow'];\n\nexport const ChipWrapper = styled.div`\n  @keyframes dropIn {\n    from { top: ${props => (props.dropHeight * -5)}vw; }\n    to: { top: 0px; }\n  }\n\n  position: absolute;\n  height: 4.2vw;\n  width: 4.2vw;\n  margin: 0.4vw;\n  top: 0px;\n  left: 0px;\n  animation: dropIn 0.6s ease-in 0s 1 normal forwards ${props => props.value ? 'running' : 'paused'};\n`;\n\nexport const CFChip = styled.div`\n  @keyframes yeet {\n    from { top: 0px; }\n    to { top: calc(100vh + 30vw); }\n  }\n\n  position: absolute;\n  height: 4.2vw;\n  width: 4.2vw;\n  border-radius: 50%;\n  background-color: ${props => chipColours[props.value]};\n  top: 0px;\n  left: 0px;\n  display: ${props => props.value ? 'block' : 'none'};\n  animation: yeet 1s ease-in 0s 1 normal forwards ${props => props.yeet ? 'running' : 'paused'};\n`;\n\nexport const CFCellWrapper = styled.div`\n  height: ${props => (props.width / 20)}px;\n  width: ${props => (props.width / 20)}px;\n  position: relative;\n  top: 0px;\n  left: 0px;\n`;\n\nexport const CFGridPiece = styled.svg`\n  z-index: 69;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n`;\n\nexport const CFGridHole = styled.circle`\n  cx: 50%;\n  cy: 50%;\n  r: 57%;\n  stroke: blue;\n  stroke-width: 30%;\n  fill: none;\n`;\n","import React from 'react';\n\nimport * as Styled from './styles';\n\nclass CFCell extends React.Component {\n  constructor(props) {\n    super(props);\n    this.rerenderDammit = this.rerenderDammit.bind(this);\n  }\n\n  rerenderDammit() {\n    this.forceUpdate();\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.rerenderDammit);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.rerenderDammit);\n  }\n\n  render() {\n    return (\n      <Styled.CFCellWrapper width={window.innerWidth}>\n        <Styled.ChipWrapper\n          dropHeight={this.props.yPos + 1}\n          value={this.props.value}\n        >\n          <Styled.CFChip\n            value={this.props.value}\n            yeet={this.props.yeet}\n          />\n        </Styled.ChipWrapper>\n        <Styled.CFGridPiece key={window.innerWidth}>\n          <Styled.CFGridHole key={window.innerWidth} />\n        </Styled.CFGridPiece>\n      </Styled.CFCellWrapper>\n    );\n  }\n}\n\nexport default CFCell;\n","import { useState } from 'react';\n\nconst useBooleanState = (initialState = false) => {\n  const [state, setState] = useState(initialState);\n\n  const setTrue = () => {\n    setState(true);\n  };\n\n  const setFalse = () => {\n    setState(false);\n  };\n\n  const toggle = () => {\n    setState(!state);\n  };\n\n  return {\n    state,\n    value: state,\n    setState,\n    setFalse,\n    setTrue,\n    toggle,\n  };\n};\n\nexport default useBooleanState;\n","export const NO_WINNER = 3;\n\nexport const makeEmptyGrid = () => Array(7).fill('column').map(() => Array(6).fill(0));\n\nexport const boardFull = grid => grid.every(gridCol => gridCol[0]);\n\nexport const isSafe = (grid, x, y) => (\n  x >= 0 &&\n  y >= 0 &&\n  x < grid.length &&\n  grid.length &&\n  y < grid[0].length\n);\n\nconst directions = (x, y) => [\n  i => [x, y - i],\n  i => [x + i, y - i],\n  i => [x + i, y],\n  i => [x + i, y + i],\n];\n\nconst lineExtendsHere = (grid, x, y, val) => isSafe(grid, x, y) && grid[x][y] === val;\n\n// Checks if there is a line of 4 that includes the chip at (x, y).\nexport const didWin = (grid, x, y) => {\n  const centreVal = grid[x][y];\n  for (const away of directions(x, y)) {\n    let lineLength = 1;\n    for (let i = 1; lineExtendsHere(grid, ...away(i), centreVal); i++) lineLength++;\n    for (let i = -1; lineExtendsHere(grid, ...away(i), centreVal); i--) lineLength++;\n    if (lineLength >= 4) return centreVal;\n  }\n  return false;\n};\n","import { useState } from 'react';\n\nimport useBooleanState from '../../hooks/useBooleanState';\nimport { makeEmptyGrid, didWin, boardFull, NO_WINNER } from './helpers';\nimport { easy } from './opponent';\n\nconst useCF = () => {\n  // 2D array of ints. Cells are one of: 0=empty, 1=player 1, 2=player 2.\n  const [grid, setGrid] = useState(makeEmptyGrid());\n  // Whether or not chips should fall out of the board.\n  const openState = useBooleanState(false);\n  const luigiState = useBooleanState(false); // True iff player 2's turn.\n  // Zero if game not over, number of winning player otherwise.\n  // NO_WINNER if board is full but nobody has won.\n  const [winner, setWinner] = useState(0);\n  // Hack to force React to unmount and remount between games.\n  const resetDammitState = useBooleanState(false);\n  // Whether current game has two players.\n  const twoPlayersState = useBooleanState(false);\n  // Displayed switch state; doesn't take effect until game restarted\n  const nextGameTwoPlayersState = useBooleanState(false);\n\n  const getStatus = () => {\n    if (twoPlayersState.value) {\n      switch (winner) { // eslint-disable-line default-case\n        case 1:\n          return 'Player 1 wins!';\n        case 2:\n          return 'Player 2 wins!';\n        case NO_WINNER:\n          return 'Draw. Perhaps a rematch is in order?';\n        case 0:\n          return `Player ${1 + luigiState.value}'s turn`;\n      }\n    } else {\n      switch (winner) { // eslint-disable-line default-case\n        case 1:\n          return 'Alas, you have defeated me!';\n        case 2:\n          return 'I win, you pathetic meatbag.';\n        case NO_WINNER:\n          return 'A draw? I was humoring you. Play again, and I will crush you.';\n        case 0:\n          return \"Your turn. I'm waiting, human...\";\n      }\n    }\n    return 'This should never be shown; if you\\'re reading this, something\\'s fucky.';\n  };\n\n  const resetGrid = () => {\n    openState.setTrue();\n    setTimeout(() => {\n      resetDammitState.toggle(); // This forces React to rerender \n      setWinner(0);\n      luigiState.setFalse();\n      setGrid(makeEmptyGrid());\n      openState.setFalse();\n      twoPlayersState.setState(nextGameTwoPlayersState.value);\n    }, 1000);\n  };\n\n  // Check if the game is over, either because someone won or the board is full.\n  // Perform state updates accordingly, and return whether the game is over.\n  // x,y are coords of the last chip placed;\n  // we only have to check lines that include it since this is called after every move.\n  const checkGameOver = (grid, x, y) => {\n    let gameOver = didWin(grid, x, y);\n    if (gameOver) {\n      setWinner(1 + luigiState.value); // Player 1 or 2\n    } else if (boardFull(grid)) {\n      setWinner(NO_WINNER);\n      gameOver = true;\n    }\n    return gameOver;\n  }\n\n  const doATurn = (colNum) => {\n    if (winner || grid[colNum][0]) return;\n    \n    // player move\n    const playerNum = 1 + luigiState.value;\n    const gridCopy = grid.map(gridCol => gridCol.slice());\n    // lastIndexOf(0) is the bottommost empty space in the column, i.e. where the chip will fall.\n    const rowNum = gridCopy[colNum].lastIndexOf(0);\n    gridCopy[colNum][rowNum] = playerNum;\n    \n    if (!checkGameOver(gridCopy, colNum, rowNum)) {\n      if (twoPlayersState.value) {\n        luigiState.toggle(); // switch turn to other human player\n      } else {\n        // computer opponent move\n        const opponentCol = easy(gridCopy);\n        const opponentRow = gridCopy[opponentCol].lastIndexOf(0);\n        gridCopy[opponentCol][opponentRow] = 2; // computer is always player 2\n        checkGameOver(gridCopy, opponentCol, opponentRow);\n      }\n    }\n    \n    setGrid(gridCopy);\n  };\n  \n\n  return {\n    grid,\n    switchTwoPlayers: nextGameTwoPlayersState.toggle,\n    twoPlayerGame: nextGameTwoPlayersState.value,\n    resetGrid,\n    doATurn,\n    getStatus,\n    open: openState.value,\n    resetDammit: resetDammitState.value,\n  };\n};\n\nexport default useCF;\n","// Easy opponent; selects a random available column.\nexport function easy(grid) {\n  const availableCols = [];\n  grid.forEach((col, i) => !col[0] && availableCols.push(i));\n  return availableCols[Math.floor(availableCols.length * Math.random())];\n}\n\n// TODO: Make smarter opponents\n","import styled from 'styled-components';\n\nexport const CFGrid = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: no-wrap;\n  width: 35vw;\n  height: 30vw;\n  opacity: 1;\n`;\n\nexport const CFColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: no-wrap;\n  width: 5vw;\n  height: 30vw;\n  overflow: hidden;\n`;\n","import React from 'react';\nimport Switch from '@material-ui/core/Switch';\nimport { Flex } from 'rebass';\n\nimport CFCell from './Cell';\nimport useCF from './useCF';\n\nimport * as Styled from './styles';\n\nconst ConnectFour = () => {\n  const {\n    grid,\n    open,\n    resetDammit,\n    twoPlayerGame,\n    resetGrid,\n    doATurn,\n    getStatus,\n    switchTwoPlayers,\n  } = useCF();\n\n  return (\n    <div className=\"crap\">\n      <Styled.CFGrid key={resetDammit}>\n        {grid.map((col, i) => (\n          <Styled.CFColumn key={i} onClick={() => doATurn(i)}>\n            {col.map((cell, j) => <CFCell value={cell} key={[i, j]} yPos={j} yeet={open} />)}\n          </Styled.CFColumn>\n        ))}\n      </Styled.CFGrid>\n      <div className=\"content-body-right\">\n        <p>Connect Four: Be the first to make a line of four chips.</p>\n        <p>Select a column to drop a chip there.</p>\n        <p>Difficulty options coming soon.</p>\n        <button onClick={resetGrid}>Reset</button>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n          <Switch value={twoPlayerGame} onClick={switchTwoPlayers} />\n          <p>2-player game</p>\n        </Flex>\n        \n        <p>{getStatus()}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default ConnectFour;\n","import styled from 'styled-components';\n\nexport const GameWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100vw;\n`;\n","import React from 'react';\n\nimport Maze from '../Maze';\nimport ConnectFour from '../ConnectFour';\nimport * as Styled from './styles';\n\nconst Games = () => (\n  <div>\n    <div className=\"content-body\">\n      <p>Here are some games I've made. More will be added approximately once every whenever I feel like it.</p>\n    </div>\n    <div className=\"content-body\">\n      <p>Maze: Use WASD to move. Exit is in lower-right corner. Press R or click the button below to generate a new maze.</p>\n      <p>Click anywhere on the maze before using the keyboard.</p>\n      <p>Alternatively, tap/click any directly connected (same row/column) location to move there.</p>\n    </div>\n    <Styled.GameWrapper>\n      <Maze />\n    </Styled.GameWrapper>\n    <Styled.GameWrapper>\n      <ConnectFour />\n    </Styled.GameWrapper>\n  </div>\n);\n\nexport default Games;\n","import styled from 'styled-components';\n\nexport const FrogWrapper = styled.div`\n  position: fixed;\n  bottom: 0px;\n`;\n\nexport const Froggo = styled.img`\n  max-height: 15vh;\n  max-width: 10vw;\n  opacity: ${props => props.visible ? 1 : 0};\n  transition: opacity 0.5s;\n`;\n\nexport const FrogControl = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n","import React from 'react';\nimport Switch from '@material-ui/core/Switch';\n\nimport froggo from '../../assets/mlgFrog.gif'\nimport * as Styled from './styles';\n\nconst MlgFrog = () => {\n  const [visible, setVisible] = React.useState(false);\n\n  return (\n    <Styled.FrogControl>\n      <p>Toggle froggo</p>\n      <Switch\n        checked={visible}\n        onChange={event => setVisible(event.target.checked)}\n      />\n      <Styled.FrogWrapper>\n        <Styled.Froggo src={froggo} visible={visible} />\n      </Styled.FrogWrapper>\n    </Styled.FrogControl>\n  );\n};\n\nexport default MlgFrog;\n","import React from 'react';\n\nimport Sanik from '../../components/Sanik';\nimport MlgFrog from '../../components/MlgFrog';\n\nfunction MemesPage() {\n  return (\n    <div>\n      <div className=\"content-body\">\n        <p>More memes coming soon!</p>\n        <a\n          href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Even more memes\n        </a>\n        <MlgFrog />\n      </div>\n      <Sanik />\n    </div>\n  );\n}\n\nexport default MemesPage;\n","import styled from 'styled-components';\n\nexport const NavBarWrapper = styled.div`\n  min-width: 100vw;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const NavBar = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  min-width: 80vw;\n  justify-content: center;\n`;\n\nexport const NavButton = styled.div`\n  height: 70px;\n  width: 120px;\n  background-color: #282c34;\n  color: white;\n  text-align: center;\n  line-height: 70px;\n  border: 2px solid #505868;\n  :hover {\n    background-color: #505868;\n  }\n  text-decoration-line: none;\n`;\n","import React from 'react';\n// eslint-disable-next-line no-unused-vars\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport pageRoutes from '../../constants/page-routes';\nimport * as Styled from './styles';\n\nconst NavBar = () => (\n  <Styled.NavBarWrapper>\n    <Styled.NavBar>\n      <Link to={pageRoutes.HOMEPAGE}>\n        <Styled.NavButton>Home</Styled.NavButton>\n      </Link>\n      <Link to={pageRoutes.ABOUT_ME}>\n        <Styled.NavButton>About Me</Styled.NavButton>\n      </Link>\n      <Link to={pageRoutes.GAMES}>\n        <Styled.NavButton>Games</Styled.NavButton>\n      </Link>\n      <Link to={pageRoutes.MEMES}>\n        <Styled.NavButton>Memes</Styled.NavButton>\n      </Link>\n    </Styled.NavBar>\n  </Styled.NavBarWrapper>\n);\n\nexport default NavBar;\n","import React from 'react';\nimport PropTypes from 'prop-types'; // eslint-disable-next-line no-unused-vars\nimport { withRouter, Route } from 'react-router-dom';\n\nimport pageRoutes from './constants/page-routes';\nimport Homepage from './containers/Homepage';\nimport ComingSoon from './containers/ComingSoon';\nimport Games from './containers/GamesPage';\nimport MemesPage from './containers/MemesPage';\nimport NavBar from './components/NavBar';\n\nimport './App.css';\n\nconst Routes = () => {\n  const title = 'Zoey\\'s Website of Dank Memes';\n  const backgroundImage = 'https://imgur.com/kgbYeVO.jpg';\n  \n  return (\n    <div className=\"App\" style={{ backgroundImage: `url(${backgroundImage})` }}>\n      <header className=\"App-header\" style={{ backgroundImage: `url(${backgroundImage})` }}>\n        <h1 className=\"page-title\">{title}</h1>\n      </header>\n      <NavBar />\n      <Route path={pageRoutes.HOMEPAGE} exact component={Homepage} />\n      <Route path={pageRoutes.ABOUT_ME} component={ComingSoon} />\n      <Route path={pageRoutes.GAMES} component={Games} />\n      <Route path={pageRoutes.MEMES} component={MemesPage} />\n    </div>\n  );\n};\n\nRoutes.propTypes = {\n  location: PropTypes.shape({}),\n};\n\nexport default withRouter(Routes);\n","import React from 'react'; // eslint-disable-next-line no-unused-vars\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport Routes from './Routes';\n\nimport './App.css';\n\nconst App = () => (\n  <Router>\n    <Routes />\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}